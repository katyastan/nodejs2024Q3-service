openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - App
  /user:
    get:
      operationId: UsersController_getAll
      parameters: []
      responses:
        '200':
          description: List of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
      summary: Get all users
      tags:
        - Users
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid input.
      summary: Create a new user
      tags:
        - Users
  /user/{id}:
    get:
      operationId: UsersController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      responses:
        '200':
          description: User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid UUID.
        '404':
          description: User not found.
      summary: Get single user by id
      tags:
        - Users
    put:
      operationId: UsersController_update
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid input.
        '403':
          description: Old password is wrong.
        '404':
          description: User not found.
      summary: Update user password
      tags:
        - Users
    delete:
      operationId: UsersController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully.
        '400':
          description: Invalid UUID.
        '404':
          description: User not found.
      summary: Delete user
      tags:
        - Users
  /artist:
    get:
      operationId: ArtistsController_getAll
      parameters: []
      responses:
        '200':
          description: List of artists.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistResponseDto'
      summary: Get all artists
      tags:
        - Artists
    post:
      operationId: ArtistsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Artist created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid input.
      summary: Create a new artist
      tags:
        - Artists
  /artist/{id}:
    get:
      operationId: ArtistsController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '200':
          description: Artist found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid UUID.
        '404':
          description: Artist not found.
      summary: Get single artist by id
      tags:
        - Artists
    put:
      operationId: ArtistsController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '200':
          description: Artist updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid UUID.
        '404':
          description: Artist not found.
      summary: Update artist info
      tags:
        - Artists
    delete:
      operationId: ArtistsController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '204':
          description: Artist deleted successfully.
        '400':
          description: Invalid UUID.
        '404':
          description: Artist not found.
      summary: Delete artist
      tags:
        - Artists
  /album:
    get:
      operationId: AlbumsController_getAll
      parameters: []
      responses:
        '200':
          description: List of albums.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumResponseDto'
      summary: Get all albums
      tags:
        - Albums
    post:
      operationId: AlbumsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Invalid input.
      summary: Create a new album
      tags:
        - Albums
  /album/{id}:
    get:
      operationId: AlbumsController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '200':
          description: Album found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Invalid UUID.
        '404':
          description: Album not found.
      summary: Get single album by id
      tags:
        - Albums
    put:
      operationId: AlbumsController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '200':
          description: Album updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Invalid UUID.
        '404':
          description: Album not found.
      summary: Update album info
      tags:
        - Albums
    delete:
      operationId: AlbumsController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '204':
          description: Album deleted successfully.
        '400':
          description: Invalid UUID.
        '404':
          description: Album not found.
      summary: Delete album
      tags:
        - Albums
  /track:
    get:
      operationId: TracksController_getAll
      parameters: []
      responses:
        '200':
          description: List of tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackResponseDto'
      summary: Get all tracks
      tags:
        - Tracks
    post:
      operationId: TracksController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Invalid input.
      summary: Create a new track
      tags:
        - Tracks
  /track/{id}:
    get:
      operationId: TracksController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '200':
          description: Track found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Invalid UUID.
        '404':
          description: Track not found.
      summary: Get single track by id
      tags:
        - Tracks
    put:
      operationId: TracksController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '200':
          description: Track updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Invalid UUID.
        '404':
          description: Track not found.
      summary: Update track info
      tags:
        - Tracks
    delete:
      operationId: TracksController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '204':
          description: Track deleted successfully.
        '400':
          description: Invalid UUID.
        '404':
          description: Track not found.
      summary: Delete track
      tags:
        - Tracks
  /favs:
    get:
      operationId: FavoritesController_getAll
      parameters: []
      responses:
        '200':
          description: List of favorites.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoritesResponseDto'
      summary: Get all favorites
      tags:
        - Favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '201':
          description: Artist added to favorites.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseDto'
        '400':
          description: Invalid UUID.
        '422':
          description: Artist not found.
      summary: Add artist to favorites
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '204':
          description: Artist deleted from favorites.
        '400':
          description: Invalid UUID.
        '404':
          description: Artist  is not favorite.
      summary: Delete artist from favorites
      tags:
        - Favorites
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '201':
          description: Album added to favorites.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseDto'
        '400':
          description: Invalid UUID.
        '422':
          description: Album not found.
      summary: Add album to favorites
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '204':
          description: Album deleted from favorites.
        '400':
          description: Invalid UUID.
        '404':
          description: Album is not favorite.
      summary: Delete album from favorites
      tags:
        - Favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '201':
          description: Track added to favorites.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseDto'
        '400':
          description: Invalid UUID.
        '422':
          description: Track not found.
      summary: Add track to favorites
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '204':
          description: Track deleted from favorites.
        '400':
          description: Invalid UUID.
        '404':
          description: Track is not favorite.
      summary: Delete track from favorites
      tags:
        - Favorites
info:
  title: Home Library Service API
  description: API documentation for Home Library Service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-123456789012
          description: UUID of the user.
        login:
          type: string
          example: your_name
          description: Login name of the user.
        password:
          type: string
          example: Password123
          description: Password of the user account.
        version:
          type: number
          example: 1
          description: Version number of the user record.
        createdAt:
          type: number
          example: 1655000000
          description: Timestamp of user creation.
        updatedAt:
          type: number
          example: 1655999999
          description: Timestamp of the last user update.
      required:
        - id
        - login
        - password
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: your_name
          description: Unique login name for the user.
        password:
          type: string
          example: Password123
          description: Password for the user account.
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: OldPassword123
          description: Current password of the user.
        newPassword:
          type: string
          example: NewPassword123
          description: New password for the user.
      required:
        - oldPassword
        - newPassword
    ArtistResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-123456789012
          description: UUID of the artist.
        name:
          type: string
          example: Freddie Mercury
          description: Name of the artist.
        grammy:
          type: boolean
          example: true
          description: Indicates if the artist has won a Grammy.
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties: {}
    AlbumResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-123456789012
          description: UUID of the album.
        name:
          type: string
          example: Freddie Mercury
          description: Name of the album.
        year:
          type: number
          example: 1991
          description: Indicates the year the album was released.
        artistId:
          type: string
          example: 123e4567-e89b-12d3-a456-123456789012
          description: UUID of the artist.
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties: {}
    TrackResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-123456789012
          description: UUID of the track.
        name:
          type: string
          example: Bohemian Rhapsody
          description: Name of the track.
        artistId:
          type: string
          example: 123e4567-e89b-12d3-a456-123456789012
          description: UUID of the artist.
        albumId:
          type: string
          example: 123e4567-e89b-12d3-a456-123456789012
          description: UUID of the album.
        duration:
          type: number
          example: 354
          description: Duration of the track in seconds.
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties: {}
    FavoritesResponseDto:
      type: object
      properties:
        artists:
          example: []
          description: List of favorite artists.
          type: array
          items:
            type: string
        albums:
          example: []
          description: List of favorite albums.
          type: array
          items:
            type: string
        tracks:
          example: []
          description: List of favorite tracks.
          type: array
          items:
            type: string
      required:
        - artists
        - albums
        - tracks
